package p3Testat;
import p3Testat.EAM;
public class Wallis_Product {


	public static void main(String[] args) 
	{
		System.out.println("Geben sie ein n ein:");
		long l_n = EAM.rLong();
		double l_result = 2;
		double l_top = 2;
		double l_bottom = 3;
		for ( long i = 0; i < l_n-1; i++)
		{
			l_result = l_result * (l_top / l_bottom);
			if(l_bottom > l_top) l_top+=2;
			else if(l_bottom < l_top) l_bottom+=2;
		}
		System.out.println("Näherungswert für Pi (iterativ berechnet) ist: "+ 2* l_result);
		try
		{
			System.out.println("Näherungswert für Pi (rekursiv berechnet) ist: "+ 2* ValRec(l_n,false,2.0,1.0));
		}
		catch(StackOverflowError e)
		{
			System.out.println("Zu auslastend für die rekursive Variante :( (so bis 3000 +- 1000 gehts, zmd. auf meinem Rechner)");
		}

		

	}
	public static Double ValRec(double p_Num, boolean p_switch, double p_top, double p_bot) // Nur ein bisschen rumgespielt, höchstwahrscheinlich eher mäßig effektiv implementiert.
	{
		if(p_Num > 0)
		{
			boolean l_switch = p_switch;
			long l_top = p_top;
			long l_bot = p_bot;
			double l_result = l_top/l_bot;
			if(l_switch) l_top += 2; 
			else l_bot +=2;
			return l_result * ValRec (p_Num-1,!l_switch,l_top,l_bot);			
		}
		else
			return 1.0;
	}
}
